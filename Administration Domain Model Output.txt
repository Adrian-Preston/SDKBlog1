Creating temporary working copy for branch 'trunk'...
Successfully created temporary working copy with id 'd76590d6-dcc5-46d9-97db-ed11aff3e849' based on branch 'trunk'
Opening Administration
(function (unit, model) {

        /*
         * JavaScript code generated by mendixmodelsdk.sdk.extras.JavaScriptSerializer
         * from unit with id "96005538-a88f-49a5-ab28-98a8dc80ec5a" of type DomainModels$DomainModel
         * in working copy "JavaExportApp"
         * on 13-9-2022.
         */

        var generalization1 = domainmodels.Generalization.create(model);
        // Note: this is an unsupported internal property of the Model SDK which is subject to change.
        generalization1.__generalization.updateWithRawValue("System.User");

        var stringAttributeType1 = domainmodels.StringAttributeType.create(model);

        var storedValue1 = domainmodels.StoredValue.create(model);

        var fullName1 = domainmodels.Attribute.create(model);
        fullName1.name = "FullName";
        fullName1.type = stringAttributeType1;   // Note: for this property a default value is defined.
        fullName1.value = storedValue1;   // Note: for this property a default value is defined.

        var stringAttributeType2 = domainmodels.StringAttributeType.create(model);

        var storedValue2 = domainmodels.StoredValue.create(model);

        var email1 = domainmodels.Attribute.create(model);
        email1.name = "Email";
        email1.type = stringAttributeType2;   // Note: for this property a default value is defined.
        email1.value = storedValue2;   // Note: for this property a default value is defined.

        var booleanAttributeType1 = domainmodels.BooleanAttributeType.create(model);

        var storedValue3 = domainmodels.StoredValue.create(model);
        storedValue3.defaultValue = "true";

        var isLocalUser1 = domainmodels.Attribute.create(model);
        isLocalUser1.name = "IsLocalUser";
        isLocalUser1.type = booleanAttributeType1;   // Note: for this property a default value is defined.
        isLocalUser1.value = storedValue3;   // Note: for this property a default value is defined.

        var memberAccess1 = domainmodels.MemberAccess.create(model);
        memberAccess1.attribute = model.findAttributeByQualifiedName("Administration.Account.FullName");
        memberAccess1.accessRights = domainmodels.MemberAccessRights.ReadWrite;

        var memberAccess2 = domainmodels.MemberAccess.create(model);
        memberAccess2.attribute = model.findAttributeByQualifiedName("Administration.Account.Email");
        memberAccess2.accessRights = domainmodels.MemberAccessRights.ReadWrite;

        var memberAccess3 = domainmodels.MemberAccess.create(model);
        memberAccess3.attribute = model.findAttributeByQualifiedName("Administration.Account.IsLocalUser");
        memberAccess3.accessRights = domainmodels.MemberAccessRights.ReadOnly;

        var accessRule1 = domainmodels.AccessRule.create(model);
        accessRule1.memberAccesses.push(memberAccess1);
        accessRule1.memberAccesses.push(memberAccess2);
        accessRule1.memberAccesses.push(memberAccess3);
        accessRule1.moduleRoles.push(model.findModuleRoleByQualifiedName("Administration.Administrator"));
        accessRule1.allowCreate = true;
        accessRule1.allowDelete = true;

        var memberAccess4 = domainmodels.MemberAccess.create(model);
        memberAccess4.attribute = model.findAttributeByQualifiedName("Administration.Account.FullName");
        memberAccess4.accessRights = domainmodels.MemberAccessRights.ReadOnly;

        var memberAccess5 = domainmodels.MemberAccess.create(model);
        memberAccess5.attribute = model.findAttributeByQualifiedName("Administration.Account.Email");
        memberAccess5.accessRights = domainmodels.MemberAccessRights.ReadOnly;

        var memberAccess6 = domainmodels.MemberAccess.create(model);
        memberAccess6.attribute = model.findAttributeByQualifiedName("Administration.Account.IsLocalUser");

        var accessRule2 = domainmodels.AccessRule.create(model);
        accessRule2.memberAccesses.push(memberAccess4);
        accessRule2.memberAccesses.push(memberAccess5);
        accessRule2.memberAccesses.push(memberAccess6);
        accessRule2.moduleRoles.push(model.findModuleRoleByQualifiedName("Administration.User"));
        accessRule2.defaultMemberAccessRights = domainmodels.MemberAccessRights.ReadOnly;

        var memberAccess7 = domainmodels.MemberAccess.create(model);
        memberAccess7.attribute = model.findAttributeByQualifiedName("Administration.Account.FullName");
        memberAccess7.accessRights = domainmodels.MemberAccessRights.ReadWrite;

        var memberAccess8 = domainmodels.MemberAccess.create(model);
        memberAccess8.attribute = model.findAttributeByQualifiedName("Administration.Account.Email");

        var memberAccess9 = domainmodels.MemberAccess.create(model);
        memberAccess9.attribute = model.findAttributeByQualifiedName("Administration.Account.IsLocalUser");

        var accessRule3 = domainmodels.AccessRule.create(model);
        accessRule3.memberAccesses.push(memberAccess7);
        accessRule3.memberAccesses.push(memberAccess8);
        accessRule3.memberAccesses.push(memberAccess9);
        accessRule3.moduleRoles.push(model.findModuleRoleByQualifiedName("Administration.User"));
        accessRule3.xPathConstraint = "[id='[%CurrentUser%]']";

        var account1 = domainmodels.Entity.create(model);
        account1.name = "Account";
        account1.location = {"x":220,"y":140};
        account1.generalization = generalization1;   // Note: for this property a default value is defined.
        account1.attributes.push(fullName1);
        account1.attributes.push(email1);
        account1.attributes.push(isLocalUser1);
        account1.accessRules.push(accessRule1);
        account1.accessRules.push(accessRule2);
        account1.accessRules.push(accessRule3);

        var noGeneralization1 = domainmodels.NoGeneralization.create(model);
        noGeneralization1.persistable = false;

        var stringAttributeType3 = domainmodels.StringAttributeType.create(model);

        var storedValue4 = domainmodels.StoredValue.create(model);

        var oldPassword1 = domainmodels.Attribute.create(model);
        oldPassword1.name = "OldPassword";
        oldPassword1.type = stringAttributeType3;   // Note: for this property a default value is defined.
        oldPassword1.value = storedValue4;   // Note: for this property a default value is defined.

        var stringAttributeType4 = domainmodels.StringAttributeType.create(model);

        var storedValue5 = domainmodels.StoredValue.create(model);

        var newPassword1 = domainmodels.Attribute.create(model);
        newPassword1.name = "NewPassword";
        newPassword1.type = stringAttributeType4;   // Note: for this property a default value is defined.
        newPassword1.value = storedValue5;   // Note: for this property a default value is defined.

        var stringAttributeType5 = domainmodels.StringAttributeType.create(model);

        var storedValue6 = domainmodels.StoredValue.create(model);

        var confirmPassword1 = domainmodels.Attribute.create(model);
        confirmPassword1.name = "ConfirmPassword";
        confirmPassword1.type = stringAttributeType5;   // Note: for this property a default value is defined.
        confirmPassword1.value = storedValue6;   // Note: for this property a default value is defined.

        var memberAccess10 = domainmodels.MemberAccess.create(model);
        memberAccess10.attribute = model.findAttributeByQualifiedName("Administration.AccountPasswordData.OldPassword");
        memberAccess10.accessRights = domainmodels.MemberAccessRights.ReadWrite;

        var memberAccess11 = domainmodels.MemberAccess.create(model);
        memberAccess11.attribute = model.findAttributeByQualifiedName("Administration.AccountPasswordData.NewPassword");
        memberAccess11.accessRights = domainmodels.MemberAccessRights.ReadWrite;

        var memberAccess12 = domainmodels.MemberAccess.create(model);
        memberAccess12.attribute = model.findAttributeByQualifiedName("Administration.AccountPasswordData.ConfirmPassword");
        memberAccess12.accessRights = domainmodels.MemberAccessRights.ReadWrite;

        var memberAccess13 = domainmodels.MemberAccess.create(model);
        memberAccess13.association = model.findAssociationBaseByQualifiedName("Administration.AccountPasswordData_Account");
        memberAccess13.accessRights = domainmodels.MemberAccessRights.ReadOnly;

        var accessRule4 = domainmodels.AccessRule.create(model);
        accessRule4.memberAccesses.push(memberAccess10);
        accessRule4.memberAccesses.push(memberAccess11);
        accessRule4.memberAccesses.push(memberAccess12);
        accessRule4.memberAccesses.push(memberAccess13);
        accessRule4.moduleRoles.push(model.findModuleRoleByQualifiedName("Administration.Administrator"));
        accessRule4.moduleRoles.push(model.findModuleRoleByQualifiedName("Administration.User"));
        accessRule4.defaultMemberAccessRights = domainmodels.MemberAccessRights.ReadWrite;

        var accountPasswordData1 = domainmodels.Entity.create(model);
        accountPasswordData1.name = "AccountPasswordData";
        accountPasswordData1.location = {"x":600,"y":140};
        accountPasswordData1.generalization = noGeneralization1;   // Note: for this property a default value is defined.
        accountPasswordData1.attributes.push(oldPassword1);
        accountPasswordData1.attributes.push(newPassword1);
        accountPasswordData1.attributes.push(confirmPassword1);
        accountPasswordData1.accessRules.push(accessRule4);

        var associationDeleteBehavior1 = domainmodels.AssociationDeleteBehavior.create(model);

        var accountPasswordData_Account1 = domainmodels.Association.create(model);
        accountPasswordData_Account1.name = "AccountPasswordData_Account";
        accountPasswordData_Account1.deleteBehavior = associationDeleteBehavior1;   // Note: for this property a default value is defined.
        accountPasswordData_Account1.parentConnection = {"x":0,"y":54};
        accountPasswordData_Account1.childConnection = {"x":100,"y":54};

        var domainModel1 = domainmodels.DomainModel.createIn(unit);
        domainModel1.entities.push(account1);
        domainModel1.entities.push(accountPasswordData1);
        domainModel1.associations.push(accountPasswordData_Account1);

        accountPasswordData_Account1.parent = accountPasswordData1;
        accountPasswordData_Account1.child = account1;

})